// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/proxx/game (interfaces: Playground)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPlayground is a mock of Playground interface
type MockPlayground struct {
	ctrl     *gomock.Controller
	recorder *MockPlaygroundMockRecorder
}

// MockPlaygroundMockRecorder is the mock recorder for MockPlayground
type MockPlaygroundMockRecorder struct {
	mock *MockPlayground
}

// NewMockPlayground creates a new mock instance
func NewMockPlayground(ctrl *gomock.Controller) *MockPlayground {
	mock := &MockPlayground{ctrl: ctrl}
	mock.recorder = &MockPlaygroundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlayground) EXPECT() *MockPlaygroundMockRecorder {
	return m.recorder
}

// Click mocks base method
func (m *MockPlayground) Click(arg0 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Click", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Click indicates an expected call of Click
func (mr *MockPlaygroundMockRecorder) Click(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Click", reflect.TypeOf((*MockPlayground)(nil).Click), arg0)
}

// LoseState mocks base method
func (m *MockPlayground) LoseState() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoseState")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LoseState indicates an expected call of LoseState
func (mr *MockPlaygroundMockRecorder) LoseState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoseState", reflect.TypeOf((*MockPlayground)(nil).LoseState))
}

// Print mocks base method
func (m *MockPlayground) Print() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Print")
}

// Print indicates an expected call of Print
func (mr *MockPlaygroundMockRecorder) Print() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockPlayground)(nil).Print))
}

// PrintStateless mocks base method
func (m *MockPlayground) PrintStateless() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintStateless")
}

// PrintStateless indicates an expected call of PrintStateless
func (mr *MockPlaygroundMockRecorder) PrintStateless() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintStateless", reflect.TypeOf((*MockPlayground)(nil).PrintStateless))
}

// SetOnStateChangeHook mocks base method
func (m *MockPlayground) SetOnStateChangeHook(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnStateChangeHook", arg0)
}

// SetOnStateChangeHook indicates an expected call of SetOnStateChangeHook
func (mr *MockPlaygroundMockRecorder) SetOnStateChangeHook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnStateChangeHook", reflect.TypeOf((*MockPlayground)(nil).SetOnStateChangeHook), arg0)
}

// WinState mocks base method
func (m *MockPlayground) WinState() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WinState")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WinState indicates an expected call of WinState
func (mr *MockPlaygroundMockRecorder) WinState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WinState", reflect.TypeOf((*MockPlayground)(nil).WinState))
}
